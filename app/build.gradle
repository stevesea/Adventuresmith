apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'
//apply plugin: 'easyrelease'

try {
    // wrap with try so build works even if signing stuff is missing
    apply from: "../../advsmith_signing.gradle"

    // now part of ../../advsmith_signing
//    signingConfigs {
//        debug {
//            storeFile file('debug.keystore')
//            storePassword 'android'
//            keyAlias 'androiddebugkey'
//            keyPassword 'android'
//        }
//        release {
//            storeFile file("$keystorePath")
//            storePassword "$keystorePassword"
//            keyAlias "$storeKeyAlias"
//            keyPassword "$aliasKeyPassword"
//        }
//    }
} catch (ex) {

}


androidGitVersion {
    // default:
    //format = '%tag%%.count%%<commit>%%-branch%%...dirty%'
    format = '%tag%%.count%%-commit%%-branch%'
}

ext {
    androidSupportVersion = '25.4.0'
}

android {
    compileSdkVersion 25
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "org.steavesea.adventuresmith"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode androidGitVersion.code()
        versionName androidGitVersion.name()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        // Enable VectorDrawableCompat for API < 21
        vectorDrawables.useSupportLibrary = true
    }

    flavorDimensions "minApi"
    productFlavors {
        // Define separate dev and prod product flavors.
        dev {
            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
            // to pre-dex each module and produce an APK that can be tested on
            // Android Lollipop without time consuming dex merging processes.
            minSdkVersion 21
            dimension "minApi"
        }
        prod {
            // The actual minSdkVersion for the application.
            minSdkVersion 16
            dimension "minApi"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            minifyEnabled false
            debuggable true
            applicationIdSuffix
            try {
                signingConfig signingConfigs.debug
            } catch (ex) {
            }
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            try {
                signingConfig signingConfigs.release
            } catch (ex) {

            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError true
        textReport true
        textOutput 'stdout'
        warning 'InvalidPackage' // lint sees references in the grooid jar to unavailable java classes
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}


dependencies {
    compile project(':adventuresmith-core')
    compile 'com.android.support:multidex:1.0.1'
    compile "com.github.salomonbrys.kodein:kodein-android:$kodein_version"

    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile "com.android.support:appcompat-v7:$androidSupportVersion"
    compile "com.android.support:recyclerview-v7:$androidSupportVersion"
    compile "com.android.support:cardview-v7:$androidSupportVersion"

    compile("com.crashlytics.sdk.android:crashlytics:${crashlytics_version}@aar") {
        transitive = true;
    }

    // used to provide out of the box icon font support. simplifies development,
    // and provides scalable icons. the core is very very light
    // https://github.com/mikepenz/Android-Iconics
    compile "com.mikepenz:iconics-core:$iconics_core_version"
    compile "com.mikepenz:iconics-views:$iconics_core_version"
    compile "com.mikepenz:community-material-typeface:$iconics_cmd_version"
    compile "com.mikepenz:ionicons-typeface:$iconics_ion_version"

    compile("com.mikepenz:materialdrawer:$materialdrawer_version") {
        transitive = true
        exclude module: "fastadapter"
    }

    compile "com.mikepenz:fastadapter:$fastadapter_version"
    compile "com.mikepenz:fastadapter-commons:$fastadapter_commons_version"
    compile "com.mikepenz:fastadapter-extensions:$fastadapter_extensions_version"

    compile "com.mikepenz:materialize:$materialize_version"

    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary_version"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary_version"

    testCompile "junit:junit:$junit_version"
    testCompile "org.mockito:mockito-core:$mockito_version"

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile "org.jetbrains.anko:anko-sdk23:$ankoVersion" // sdk19, sdk21, sdk23 are also available
    compile "org.jetbrains.anko:anko-support-v4:$ankoVersion" // In case you need support-v4 bindings
    compile "org.jetbrains.anko:anko-appcompat-v7:$ankoVersion" // For appcompat-v7 bindings

    compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version"


    compile group: 'org.slf4j', name: 'slf4j-android', version: slf4j_version
}

// APT doesn't know to make these directories for tests. Force them to
// be written.
afterEvaluate {
    def createAptTestDirs = tasks.create('createAptTestDirs')
    createAptTestDirs.doFirst {
        file("$buildDir/generated/source/apt/test/dev/debug").mkdirs()
        file("$buildDir/generated/source/apt/test/dev/release").mkdirs()
        file("$buildDir/generated/source/apt/test/prod/debug").mkdirs()
        file("$buildDir/generated/source/apt/test/prod/release").mkdirs()
    }
    tasks.getByName('mockableAndroidJar').finalizedBy(createAptTestDirs)
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat 'full'
    }
}

check.dependsOn detekt